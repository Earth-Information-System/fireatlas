{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FEDS debugging system"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fire_Forward in FireMain.py "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ycpy\n",
    "ycpy.util.nowarn()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import FireObj\n",
    "import FireIO\n",
    "import FireConsts\n",
    "import FireMain\n",
    "import FireFuncs\n",
    "import FireTime\n",
    "import FireGpkg_sfs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'FireGpkg_sfs' from '/Users/yangchen/GoogleDrive/My/My.Research/UCI/ProjectsFull/California.fire/Code/fireatlas/FireGpkg_sfs.py'>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import importlib\n",
    "importlib.reload(FireIO)\n",
    "importlib.reload(FireMain)\n",
    "importlib.reload(FireObj)\n",
    "importlib.reload(FireConsts)\n",
    "importlib.reload(FireGpkg_sfs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import glob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import geopandas as gpd\n",
    "from datetime import date\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "    import FireObj, FireIO, FireTime\n",
    "    from FireConsts import firesrc, firenrt, opt_rmstatfire"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "tst=(2020,9,6,'PM')\n",
    "region = ('Creek',[-119.5,36.8,-118.9,37.7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "allfires = FireMain.Fobj_init([2020,9,6,'AM'],'Creek',restart=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "fids_ea = allfires.fids_active"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "t = (2020,9,6,'PM')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "allfires.cleanup(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 [2020, 9, 6, 'PM']\n",
      "1 [2020, 9, 6, 'PM']\n",
      "2 [2020, 9, 6, 'PM']\n",
      "3 [2020, 9, 6, 'PM']\n"
     ]
    }
   ],
   "source": [
    "for i, f in allfires.fires.items():\n",
    "    print(i,list(t))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([2020, 9, 5, 'AM'], [2020, 9, 5, 'PM'], 0.5)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "allfires.fires[0].t_st,allfires.fires[0].t_ed,allfires.fires[0].duration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([2020, 9, 5, 'AM'], [2020, 9, 5, 'PM'], 0.5)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "allfires.fires[0].t_st,allfires.fires[0].t_ed,allfires.fires[0].duration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "allfires_all = FireIO.load_fobj([2020,9,6,'PM'],'Creek',activeonly=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2020, 9, 6, 'AM']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "allfires_all.fires[0].t_ed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "allfires = FireMain.Fobj_init(tst,region[0],restart=restart)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "fids_ea = allfires.fids_active"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "afp = FireIO.read_AFP(tst,src=firesrc,nrt=firenrt,region=region)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "    import FireObj,FireClustering,FireVector,FireFuncs\n",
    "    from FireConsts import expand_only,firessr\n",
    "\n",
    "    # initializations\n",
    "    idmax = allfires.number_of_fires-1  # maximum id of existing fires (max(allfires.fires.keys())?)\n",
    "    fids_expanded = []   # a list of fire ids that is expanded at t\n",
    "    fids_new = []        # a list of fire ids that is created at t\n",
    "\n",
    "    # derive fire connecting ranges of existing active fires (fids_ea)\n",
    "    eafirerngs = FireMain.set_eafirerngs(allfires,fids_ea)\n",
    "\n",
    "    # create a spatial index based on geometry bounds of fire connecting ranges\n",
    "    ea_idx = FireClustering.build_rtree(eafirerngs)\n",
    "\n",
    "    # do preliminary clustering using new active fire locations (assign cid to each pixel)\n",
    "    afp_loc = list(zip(afp.x, afp.y))\n",
    "    CONNECTIVITY_CLUSTER = FireFuncs.get_CONNECTIVITY_CLUSTER()\n",
    "    cid = FireClustering.do_clustering(afp_loc,CONNECTIVITY_CLUSTER)  # cluster id for each afp_loc\n",
    "\n",
    "\n",
    "    # loop over all new clusters (0:cid-1) and determine its fate\n",
    "    FP2expand = {}  # a diction to record {fid : Firepixel objects} pairs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "for ic in range(max(cid)+1):\n",
    "    print(ic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "        pixels = [FireObj.FirePixel(afp.iloc[i].x,afp.iloc[i].y,afp.iloc[i].Lon,afp.iloc[i].Lat,afp.iloc[i].FRP,\n",
    "                                    afp.iloc[i].DS,afp.iloc[i].DT,afp.iloc[i].ampm,afp.iloc[i].YYYYMMDD_HHMM,\n",
    "                                    afp.iloc[i].Sat,-1) for i, v in enumerate(cid) if v==ic]  # pixels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "cluster = FireObj.Cluster(ic,pixels,allfires.t,sensor=firessr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "hull = cluster.hull   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "id_cfs = FireClustering.idx_intersection(ea_idx, cluster.b_box) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "id_newfire = idmax + 1\n",
    "fids_new.append(id_newfire)  # record id_newfire to fid_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "newfire = FireObj.Fire(id_newfire,allfires.t,pixels,sensor=firessr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "uselocs = newfire.newlocs_geo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "newfire.updateftype()  # update the fire type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "allfires.fires[id_newfire] = newfire"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(FP2expand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "    from datetime import date\n",
    "\n",
    "    # read from pre-saved file\n",
    "    d = date(*t[:-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = FireIO.load_AFPtmp(d,head=region[0]+'_VNP14IMGML.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "shp_Reg = FireIO.get_reg_shp(region[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "regext= shp_Reg.bounds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-119.5, 36.8, -118.9, 37.7)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regext"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "strlat='Lat'\n",
    "strlon='Lon'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "newfirepixels = df.loc[(df[strlat] >= regext[1]) & (df[strlat] <= regext[3]) &\n",
    "                      (df[strlon] >= regext[0]) & (df[strlon] <= regext[2])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "from shapely.geometry import Point\n",
    "point_data = [Point(xy) for xy in zip(newfirepixels[strlon], newfirepixels[strlat])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdf_filtered = gpd.GeoDataFrame(newfirepixels, geometry=point_data, crs=4326)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f7ed0c5f910>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gdf_filtered.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdf_32610 = gdf_filtered.to_crs(epsg=32610)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Projected CRS: EPSG:32610>\n",
       "Name: WGS 84 / UTM zone 10N\n",
       "Axis Info [cartesian]:\n",
       "- E[east]: Easting (metre)\n",
       "- N[north]: Northing (metre)\n",
       "Area of Use:\n",
       "- name: World - N hemisphere - 126°W to 120°W - by country\n",
       "- bounds: (-126.0, 0.0, -120.0, 84.0)\n",
       "Coordinate Operation:\n",
       "- name: UTM zone 10N\n",
       "- method: Transverse Mercator\n",
       "Datum: World Geodetic System 1984\n",
       "- Ellipsoid: WGS 84\n",
       "- Prime Meridian: Greenwich"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf.crs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Geographic 2D CRS: EPSG:4316>\n",
       "Name: Dealul Piscului 1930\n",
       "Axis Info [ellipsoidal]:\n",
       "- Lat[north]: Geodetic latitude (degree)\n",
       "- Lon[east]: Geodetic longitude (degree)\n",
       "Area of Use:\n",
       "- name: Romania - onshore\n",
       "- bounds: (20.26, 43.62, 29.74, 48.27)\n",
       "Datum: Dealul Piscului 1930\n",
       "- Ellipsoid: International 1924\n",
       "- Prime Meridian: Greenwich"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf.to_crs(epsg=4316).crs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fee187c62b0>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gdf.to_crs(epsg=2136).plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdf_32610['x'] = gdf_32610.geometry.x\n",
    "gdf_32610['y'] = gdf_32610.geometry.y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(gdf_32610.drop(columns='geometry'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YYYYMMDD_HHMM</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lon</th>\n",
       "      <th>FRP</th>\n",
       "      <th>Confidence</th>\n",
       "      <th>DNFlag</th>\n",
       "      <th>Type</th>\n",
       "      <th>DT</th>\n",
       "      <th>DS</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>ampm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>24054</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.600014</td>\n",
       "      <td>-119.226486</td>\n",
       "      <td>0.89</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.398032</td>\n",
       "      <td>0.442740</td>\n",
       "      <td>833157.845748</td>\n",
       "      <td>4.168137e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24055</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.599190</td>\n",
       "      <td>-119.222649</td>\n",
       "      <td>0.60</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.398244</td>\n",
       "      <td>0.442847</td>\n",
       "      <td>833500.419531</td>\n",
       "      <td>4.168059e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24056</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.600250</td>\n",
       "      <td>-119.247505</td>\n",
       "      <td>0.77</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.397187</td>\n",
       "      <td>0.442313</td>\n",
       "      <td>831300.377483</td>\n",
       "      <td>4.168088e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24057</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.595978</td>\n",
       "      <td>-119.227470</td>\n",
       "      <td>0.89</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.398032</td>\n",
       "      <td>0.442740</td>\n",
       "      <td>833088.961787</td>\n",
       "      <td>4.167685e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24058</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.595139</td>\n",
       "      <td>-119.223564</td>\n",
       "      <td>0.60</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.398244</td>\n",
       "      <td>0.442847</td>\n",
       "      <td>833437.714203</td>\n",
       "      <td>4.167606e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            YYYYMMDD_HHMM        Lat         Lon   FRP Confidence DNFlag  \\\n",
       "24054 2020-10-01 10:12:00  37.600014 -119.226486  0.89    nominal  night   \n",
       "24055 2020-10-01 10:12:00  37.599190 -119.222649  0.60    nominal  night   \n",
       "24056 2020-10-01 10:12:00  37.600250 -119.247505  0.77    nominal  night   \n",
       "24057 2020-10-01 10:12:00  37.595978 -119.227470  0.89    nominal  night   \n",
       "24058 2020-10-01 10:12:00  37.595139 -119.223564  0.60    nominal  night   \n",
       "\n",
       "       Type        DT        DS              x             y ampm  \n",
       "24054     0  0.398032  0.442740  833157.845748  4.168137e+06   AM  \n",
       "24055     0  0.398244  0.442847  833500.419531  4.168059e+06   AM  \n",
       "24056     0  0.397187  0.442313  831300.377483  4.168088e+06   AM  \n",
       "24057     0  0.398032  0.442740  833088.961787  4.167685e+06   AM  \n",
       "24058     0  0.398244  0.442847  833437.714203  4.167606e+06   AM  "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "afp = FireIO.read_AFP((2020,9,5,'AM'),src='SNPP',nrt=firenrt,region=region)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lon</th>\n",
       "      <th>FRP</th>\n",
       "      <th>Sat</th>\n",
       "      <th>DT</th>\n",
       "      <th>DS</th>\n",
       "      <th>YYYYMMDD_HHMM</th>\n",
       "      <th>ampm</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>37.201797</td>\n",
       "      <td>-119.271812</td>\n",
       "      <td>21.04</td>\n",
       "      <td>SNPP</td>\n",
       "      <td>0.442377</td>\n",
       "      <td>0.385693</td>\n",
       "      <td>2020-09-05 10:00:00</td>\n",
       "      <td>AM</td>\n",
       "      <td>4.952685e+06</td>\n",
       "      <td>-2.776114e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37.199169</td>\n",
       "      <td>-119.277367</td>\n",
       "      <td>4.98</td>\n",
       "      <td>SNPP</td>\n",
       "      <td>0.442199</td>\n",
       "      <td>0.385621</td>\n",
       "      <td>2020-09-05 10:00:00</td>\n",
       "      <td>AM</td>\n",
       "      <td>4.952644e+06</td>\n",
       "      <td>-2.776722e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>37.198254</td>\n",
       "      <td>-119.272469</td>\n",
       "      <td>21.04</td>\n",
       "      <td>SNPP</td>\n",
       "      <td>0.442377</td>\n",
       "      <td>0.385693</td>\n",
       "      <td>2020-09-05 10:00:00</td>\n",
       "      <td>AM</td>\n",
       "      <td>4.952961e+06</td>\n",
       "      <td>-2.776343e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.197338</td>\n",
       "      <td>-119.267548</td>\n",
       "      <td>21.04</td>\n",
       "      <td>SNPP</td>\n",
       "      <td>0.442556</td>\n",
       "      <td>0.385766</td>\n",
       "      <td>2020-09-05 10:00:00</td>\n",
       "      <td>AM</td>\n",
       "      <td>4.953279e+06</td>\n",
       "      <td>-2.775963e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37.195644</td>\n",
       "      <td>-119.278160</td>\n",
       "      <td>44.95</td>\n",
       "      <td>SNPP</td>\n",
       "      <td>0.442199</td>\n",
       "      <td>0.385621</td>\n",
       "      <td>2020-09-05 10:00:00</td>\n",
       "      <td>AM</td>\n",
       "      <td>4.952911e+06</td>\n",
       "      <td>-2.776962e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Lat         Lon    FRP   Sat        DT        DS       YYYYMMDD_HHMM  \\\n",
       "0  37.201797 -119.271812  21.04  SNPP  0.442377  0.385693 2020-09-05 10:00:00   \n",
       "1  37.199169 -119.277367   4.98  SNPP  0.442199  0.385621 2020-09-05 10:00:00   \n",
       "2  37.198254 -119.272469  21.04  SNPP  0.442377  0.385693 2020-09-05 10:00:00   \n",
       "3  37.197338 -119.267548  21.04  SNPP  0.442556  0.385766 2020-09-05 10:00:00   \n",
       "4  37.195644 -119.278160  44.95  SNPP  0.442199  0.385621 2020-09-05 10:00:00   \n",
       "\n",
       "  ampm             x             y  \n",
       "0   AM  4.952685e+06 -2.776114e+06  \n",
       "1   AM  4.952644e+06 -2.776722e+06  \n",
       "2   AM  4.952961e+06 -2.776343e+06  \n",
       "3   AM  4.953279e+06 -2.775963e+06  \n",
       "4   AM  4.952911e+06 -2.776962e+06  "
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "afp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "afp1 = FireIO.read_AFPVIIRS((2020,9,5,'AM'),region,sat='SNPP')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lon</th>\n",
       "      <th>FRP</th>\n",
       "      <th>Sat</th>\n",
       "      <th>DT</th>\n",
       "      <th>DS</th>\n",
       "      <th>YYYYMMDD_HHMM</th>\n",
       "      <th>ampm</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>316093</th>\n",
       "      <td>37.201797</td>\n",
       "      <td>-119.271812</td>\n",
       "      <td>21.04</td>\n",
       "      <td>SNPP</td>\n",
       "      <td>0.442377</td>\n",
       "      <td>0.385693</td>\n",
       "      <td>2020-09-05 10:00:00</td>\n",
       "      <td>AM</td>\n",
       "      <td>830904.117015</td>\n",
       "      <td>4.123773e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316094</th>\n",
       "      <td>37.199169</td>\n",
       "      <td>-119.277367</td>\n",
       "      <td>4.98</td>\n",
       "      <td>SNPP</td>\n",
       "      <td>0.442199</td>\n",
       "      <td>0.385621</td>\n",
       "      <td>2020-09-05 10:00:00</td>\n",
       "      <td>AM</td>\n",
       "      <td>830422.357352</td>\n",
       "      <td>4.123462e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316095</th>\n",
       "      <td>37.198254</td>\n",
       "      <td>-119.272469</td>\n",
       "      <td>21.04</td>\n",
       "      <td>SNPP</td>\n",
       "      <td>0.442377</td>\n",
       "      <td>0.385693</td>\n",
       "      <td>2020-09-05 10:00:00</td>\n",
       "      <td>AM</td>\n",
       "      <td>830861.272225</td>\n",
       "      <td>4.123378e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316096</th>\n",
       "      <td>37.197338</td>\n",
       "      <td>-119.267548</td>\n",
       "      <td>21.04</td>\n",
       "      <td>SNPP</td>\n",
       "      <td>0.442556</td>\n",
       "      <td>0.385766</td>\n",
       "      <td>2020-09-05 10:00:00</td>\n",
       "      <td>AM</td>\n",
       "      <td>831302.244923</td>\n",
       "      <td>4.123293e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316097</th>\n",
       "      <td>37.195644</td>\n",
       "      <td>-119.278160</td>\n",
       "      <td>44.95</td>\n",
       "      <td>SNPP</td>\n",
       "      <td>0.442199</td>\n",
       "      <td>0.385621</td>\n",
       "      <td>2020-09-05 10:00:00</td>\n",
       "      <td>AM</td>\n",
       "      <td>830367.331363</td>\n",
       "      <td>4.123068e+06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Lat         Lon    FRP   Sat        DT        DS  \\\n",
       "316093  37.201797 -119.271812  21.04  SNPP  0.442377  0.385693   \n",
       "316094  37.199169 -119.277367   4.98  SNPP  0.442199  0.385621   \n",
       "316095  37.198254 -119.272469  21.04  SNPP  0.442377  0.385693   \n",
       "316096  37.197338 -119.267548  21.04  SNPP  0.442556  0.385766   \n",
       "316097  37.195644 -119.278160  44.95  SNPP  0.442199  0.385621   \n",
       "\n",
       "             YYYYMMDD_HHMM ampm              x             y  \n",
       "316093 2020-09-05 10:00:00   AM  830904.117015  4.123773e+06  \n",
       "316094 2020-09-05 10:00:00   AM  830422.357352  4.123462e+06  \n",
       "316095 2020-09-05 10:00:00   AM  830861.272225  4.123378e+06  \n",
       "316096 2020-09-05 10:00:00   AM  831302.244923  4.123293e+06  \n",
       "316097 2020-09-05 10:00:00   AM  830367.331363  4.123068e+06  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "afp1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YYYYMMDD_HHMM</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lon</th>\n",
       "      <th>FRP</th>\n",
       "      <th>Confidence</th>\n",
       "      <th>DNFlag</th>\n",
       "      <th>Type</th>\n",
       "      <th>DT</th>\n",
       "      <th>DS</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>ampm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>24054</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.600014</td>\n",
       "      <td>-119.226486</td>\n",
       "      <td>0.89</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.398032</td>\n",
       "      <td>0.442740</td>\n",
       "      <td>4.920297e+06</td>\n",
       "      <td>-2.752846e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24055</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.599190</td>\n",
       "      <td>-119.222649</td>\n",
       "      <td>0.60</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.398244</td>\n",
       "      <td>0.442847</td>\n",
       "      <td>4.920553e+06</td>\n",
       "      <td>-2.752557e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24056</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.600250</td>\n",
       "      <td>-119.247505</td>\n",
       "      <td>0.77</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.397187</td>\n",
       "      <td>0.442313</td>\n",
       "      <td>4.919266e+06</td>\n",
       "      <td>-2.754640e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24057</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.595978</td>\n",
       "      <td>-119.227470</td>\n",
       "      <td>0.89</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.398032</td>\n",
       "      <td>0.442740</td>\n",
       "      <td>4.920600e+06</td>\n",
       "      <td>-2.753127e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24058</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.595139</td>\n",
       "      <td>-119.223564</td>\n",
       "      <td>0.60</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.398244</td>\n",
       "      <td>0.442847</td>\n",
       "      <td>4.920861e+06</td>\n",
       "      <td>-2.752833e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1743506</th>\n",
       "      <td>2020-10-31 20:30:00</td>\n",
       "      <td>37.552532</td>\n",
       "      <td>-119.167076</td>\n",
       "      <td>13.69</td>\n",
       "      <td>nominal</td>\n",
       "      <td>day</td>\n",
       "      <td>0</td>\n",
       "      <td>0.533071</td>\n",
       "      <td>0.420410</td>\n",
       "      <td>4.927278e+06</td>\n",
       "      <td>-2.750048e+06</td>\n",
       "      <td>PM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1743507</th>\n",
       "      <td>2020-10-31 20:30:00</td>\n",
       "      <td>37.551201</td>\n",
       "      <td>-119.173798</td>\n",
       "      <td>6.10</td>\n",
       "      <td>nominal</td>\n",
       "      <td>day</td>\n",
       "      <td>0</td>\n",
       "      <td>0.533422</td>\n",
       "      <td>0.420537</td>\n",
       "      <td>4.927071e+06</td>\n",
       "      <td>-2.750690e+06</td>\n",
       "      <td>PM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1743508</th>\n",
       "      <td>2020-10-31 20:30:00</td>\n",
       "      <td>37.554161</td>\n",
       "      <td>-119.168129</td>\n",
       "      <td>7.85</td>\n",
       "      <td>nominal</td>\n",
       "      <td>day</td>\n",
       "      <td>0</td>\n",
       "      <td>0.532720</td>\n",
       "      <td>0.420283</td>\n",
       "      <td>4.927085e+06</td>\n",
       "      <td>-2.750059e+06</td>\n",
       "      <td>PM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1743509</th>\n",
       "      <td>2020-10-31 20:30:00</td>\n",
       "      <td>37.526817</td>\n",
       "      <td>-119.399750</td>\n",
       "      <td>5.70</td>\n",
       "      <td>nominal</td>\n",
       "      <td>day</td>\n",
       "      <td>0</td>\n",
       "      <td>0.546530</td>\n",
       "      <td>0.425242</td>\n",
       "      <td>4.918300e+06</td>\n",
       "      <td>-2.771291e+06</td>\n",
       "      <td>PM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1743510</th>\n",
       "      <td>2020-10-31 20:30:00</td>\n",
       "      <td>37.565964</td>\n",
       "      <td>-119.347404</td>\n",
       "      <td>2.90</td>\n",
       "      <td>nominal</td>\n",
       "      <td>day</td>\n",
       "      <td>0</td>\n",
       "      <td>0.542797</td>\n",
       "      <td>0.423910</td>\n",
       "      <td>4.917432e+06</td>\n",
       "      <td>-2.764886e+06</td>\n",
       "      <td>PM</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11240 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              YYYYMMDD_HHMM        Lat         Lon    FRP Confidence DNFlag  \\\n",
       "24054   2020-10-01 10:12:00  37.600014 -119.226486   0.89    nominal  night   \n",
       "24055   2020-10-01 10:12:00  37.599190 -119.222649   0.60    nominal  night   \n",
       "24056   2020-10-01 10:12:00  37.600250 -119.247505   0.77    nominal  night   \n",
       "24057   2020-10-01 10:12:00  37.595978 -119.227470   0.89    nominal  night   \n",
       "24058   2020-10-01 10:12:00  37.595139 -119.223564   0.60    nominal  night   \n",
       "...                     ...        ...         ...    ...        ...    ...   \n",
       "1743506 2020-10-31 20:30:00  37.552532 -119.167076  13.69    nominal    day   \n",
       "1743507 2020-10-31 20:30:00  37.551201 -119.173798   6.10    nominal    day   \n",
       "1743508 2020-10-31 20:30:00  37.554161 -119.168129   7.85    nominal    day   \n",
       "1743509 2020-10-31 20:30:00  37.526817 -119.399750   5.70    nominal    day   \n",
       "1743510 2020-10-31 20:30:00  37.565964 -119.347404   2.90    nominal    day   \n",
       "\n",
       "         Type        DT        DS             x             y ampm  \n",
       "24054       0  0.398032  0.442740  4.920297e+06 -2.752846e+06   AM  \n",
       "24055       0  0.398244  0.442847  4.920553e+06 -2.752557e+06   AM  \n",
       "24056       0  0.397187  0.442313  4.919266e+06 -2.754640e+06   AM  \n",
       "24057       0  0.398032  0.442740  4.920600e+06 -2.753127e+06   AM  \n",
       "24058       0  0.398244  0.442847  4.920861e+06 -2.752833e+06   AM  \n",
       "...       ...       ...       ...           ...           ...  ...  \n",
       "1743506     0  0.533071  0.420410  4.927278e+06 -2.750048e+06   PM  \n",
       "1743507     0  0.533422  0.420537  4.927071e+06 -2.750690e+06   PM  \n",
       "1743508     0  0.532720  0.420283  4.927085e+06 -2.750059e+06   PM  \n",
       "1743509     0  0.546530  0.425242  4.918300e+06 -2.771291e+06   PM  \n",
       "1743510     0  0.542797  0.423910  4.917432e+06 -2.764886e+06   PM  \n",
       "\n",
       "[11240 rows x 12 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newfirepixels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YYYYMMDD_HHMM</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lon</th>\n",
       "      <th>FRP</th>\n",
       "      <th>Confidence</th>\n",
       "      <th>DNFlag</th>\n",
       "      <th>Type</th>\n",
       "      <th>DT</th>\n",
       "      <th>DS</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>ampm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>24054</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.600014</td>\n",
       "      <td>-119.226486</td>\n",
       "      <td>0.89</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.398032</td>\n",
       "      <td>0.442740</td>\n",
       "      <td>4.920297e+06</td>\n",
       "      <td>-2.752846e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24055</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.599190</td>\n",
       "      <td>-119.222649</td>\n",
       "      <td>0.60</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.398244</td>\n",
       "      <td>0.442847</td>\n",
       "      <td>4.920553e+06</td>\n",
       "      <td>-2.752557e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24056</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.600250</td>\n",
       "      <td>-119.247505</td>\n",
       "      <td>0.77</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.397187</td>\n",
       "      <td>0.442313</td>\n",
       "      <td>4.919266e+06</td>\n",
       "      <td>-2.754640e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24057</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.595978</td>\n",
       "      <td>-119.227470</td>\n",
       "      <td>0.89</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.398032</td>\n",
       "      <td>0.442740</td>\n",
       "      <td>4.920600e+06</td>\n",
       "      <td>-2.753127e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24058</th>\n",
       "      <td>2020-10-01 10:12:00</td>\n",
       "      <td>37.595139</td>\n",
       "      <td>-119.223564</td>\n",
       "      <td>0.60</td>\n",
       "      <td>nominal</td>\n",
       "      <td>night</td>\n",
       "      <td>0</td>\n",
       "      <td>0.398244</td>\n",
       "      <td>0.442847</td>\n",
       "      <td>4.920861e+06</td>\n",
       "      <td>-2.752833e+06</td>\n",
       "      <td>AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1743506</th>\n",
       "      <td>2020-10-31 20:30:00</td>\n",
       "      <td>37.552532</td>\n",
       "      <td>-119.167076</td>\n",
       "      <td>13.69</td>\n",
       "      <td>nominal</td>\n",
       "      <td>day</td>\n",
       "      <td>0</td>\n",
       "      <td>0.533071</td>\n",
       "      <td>0.420410</td>\n",
       "      <td>4.927278e+06</td>\n",
       "      <td>-2.750048e+06</td>\n",
       "      <td>PM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1743507</th>\n",
       "      <td>2020-10-31 20:30:00</td>\n",
       "      <td>37.551201</td>\n",
       "      <td>-119.173798</td>\n",
       "      <td>6.10</td>\n",
       "      <td>nominal</td>\n",
       "      <td>day</td>\n",
       "      <td>0</td>\n",
       "      <td>0.533422</td>\n",
       "      <td>0.420537</td>\n",
       "      <td>4.927071e+06</td>\n",
       "      <td>-2.750690e+06</td>\n",
       "      <td>PM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1743508</th>\n",
       "      <td>2020-10-31 20:30:00</td>\n",
       "      <td>37.554161</td>\n",
       "      <td>-119.168129</td>\n",
       "      <td>7.85</td>\n",
       "      <td>nominal</td>\n",
       "      <td>day</td>\n",
       "      <td>0</td>\n",
       "      <td>0.532720</td>\n",
       "      <td>0.420283</td>\n",
       "      <td>4.927085e+06</td>\n",
       "      <td>-2.750059e+06</td>\n",
       "      <td>PM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1743509</th>\n",
       "      <td>2020-10-31 20:30:00</td>\n",
       "      <td>37.526817</td>\n",
       "      <td>-119.399750</td>\n",
       "      <td>5.70</td>\n",
       "      <td>nominal</td>\n",
       "      <td>day</td>\n",
       "      <td>0</td>\n",
       "      <td>0.546530</td>\n",
       "      <td>0.425242</td>\n",
       "      <td>4.918300e+06</td>\n",
       "      <td>-2.771291e+06</td>\n",
       "      <td>PM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1743510</th>\n",
       "      <td>2020-10-31 20:30:00</td>\n",
       "      <td>37.565964</td>\n",
       "      <td>-119.347404</td>\n",
       "      <td>2.90</td>\n",
       "      <td>nominal</td>\n",
       "      <td>day</td>\n",
       "      <td>0</td>\n",
       "      <td>0.542797</td>\n",
       "      <td>0.423910</td>\n",
       "      <td>4.917432e+06</td>\n",
       "      <td>-2.764886e+06</td>\n",
       "      <td>PM</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11240 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              YYYYMMDD_HHMM        Lat         Lon    FRP Confidence DNFlag  \\\n",
       "24054   2020-10-01 10:12:00  37.600014 -119.226486   0.89    nominal  night   \n",
       "24055   2020-10-01 10:12:00  37.599190 -119.222649   0.60    nominal  night   \n",
       "24056   2020-10-01 10:12:00  37.600250 -119.247505   0.77    nominal  night   \n",
       "24057   2020-10-01 10:12:00  37.595978 -119.227470   0.89    nominal  night   \n",
       "24058   2020-10-01 10:12:00  37.595139 -119.223564   0.60    nominal  night   \n",
       "...                     ...        ...         ...    ...        ...    ...   \n",
       "1743506 2020-10-31 20:30:00  37.552532 -119.167076  13.69    nominal    day   \n",
       "1743507 2020-10-31 20:30:00  37.551201 -119.173798   6.10    nominal    day   \n",
       "1743508 2020-10-31 20:30:00  37.554161 -119.168129   7.85    nominal    day   \n",
       "1743509 2020-10-31 20:30:00  37.526817 -119.399750   5.70    nominal    day   \n",
       "1743510 2020-10-31 20:30:00  37.565964 -119.347404   2.90    nominal    day   \n",
       "\n",
       "         Type        DT        DS             x             y ampm  \n",
       "24054       0  0.398032  0.442740  4.920297e+06 -2.752846e+06   AM  \n",
       "24055       0  0.398244  0.442847  4.920553e+06 -2.752557e+06   AM  \n",
       "24056       0  0.397187  0.442313  4.919266e+06 -2.754640e+06   AM  \n",
       "24057       0  0.398032  0.442740  4.920600e+06 -2.753127e+06   AM  \n",
       "24058       0  0.398244  0.442847  4.920861e+06 -2.752833e+06   AM  \n",
       "...       ...       ...       ...           ...           ...  ...  \n",
       "1743506     0  0.533071  0.420410  4.927278e+06 -2.750048e+06   PM  \n",
       "1743507     0  0.533422  0.420537  4.927071e+06 -2.750690e+06   PM  \n",
       "1743508     0  0.532720  0.420283  4.927085e+06 -2.750059e+06   PM  \n",
       "1743509     0  0.546530  0.425242  4.918300e+06 -2.771291e+06   PM  \n",
       "1743510     0  0.542797  0.423910  4.917432e+06 -2.764886e+06   PM  \n",
       "\n",
       "[11240 rows x 12 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "t=(2020,9,17,'AM')\n",
    "region = ('Creek',[-119.5,36.8,-118.9,37.7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "allfires = FireIO.load_fobj(t,region[0],activeonly=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = allfires.fires[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1236.5360846401124"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f.farea"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdf_fperim = FireIO.load_gpkgobj(t,region[0],layer='perimeter')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Projected CRS: EPSG:32610>\n",
       "Name: WGS 84 / UTM zone 10N\n",
       "Axis Info [cartesian]:\n",
       "- E[east]: Easting (metre)\n",
       "- N[north]: Northing (metre)\n",
       "Area of Use:\n",
       "- name: World - N hemisphere - 126°W to 120°W - by country\n",
       "- bounds: (-126.0, 0.0, -120.0, 84.0)\n",
       "Coordinate Operation:\n",
       "- name: UTM zone 10N\n",
       "- method: Transverse Mercator\n",
       "Datum: World Geodetic System 1984\n",
       "- Ellipsoid: WGS 84\n",
       "- Prime Meridian: Greenwich"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf_fperim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdfsf_fperim = FireIO.load_gpkgsfs(t,0,region[0],layer='perimeter')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>n_pixels</th>\n",
       "      <th>n_newpixels</th>\n",
       "      <th>farea</th>\n",
       "      <th>fperim</th>\n",
       "      <th>flinelen</th>\n",
       "      <th>duration</th>\n",
       "      <th>pixden</th>\n",
       "      <th>meanFRP</th>\n",
       "      <th>t</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>34</td>\n",
       "      <td>34</td>\n",
       "      <td>5.809600</td>\n",
       "      <td>9.296654</td>\n",
       "      <td>9.296654</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.852382</td>\n",
       "      <td>49.474118</td>\n",
       "      <td>2020-09-05 00:00:00</td>\n",
       "      <td>POLYGON ((830863.616 4120942.254, 830858.435 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>381</td>\n",
       "      <td>347</td>\n",
       "      <td>78.174163</td>\n",
       "      <td>50.362071</td>\n",
       "      <td>42.181648</td>\n",
       "      <td>0.5</td>\n",
       "      <td>4.873733</td>\n",
       "      <td>154.283573</td>\n",
       "      <td>2020-09-05 12:00:00</td>\n",
       "      <td>POLYGON ((830255.348 4120504.272, 829447.716 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2353</td>\n",
       "      <td>1972</td>\n",
       "      <td>369.414136</td>\n",
       "      <td>103.730050</td>\n",
       "      <td>88.778034</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.369545</td>\n",
       "      <td>18.145979</td>\n",
       "      <td>2020-09-06 00:00:00</td>\n",
       "      <td>MULTIPOLYGON (((825839.433 4118483.992, 824994...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2353</td>\n",
       "      <td>0</td>\n",
       "      <td>369.414136</td>\n",
       "      <td>103.730050</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.369545</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2020-09-06 12:00:00</td>\n",
       "      <td>MULTIPOLYGON (((825839.433 4118483.992, 824994...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3908</td>\n",
       "      <td>1555</td>\n",
       "      <td>516.683128</td>\n",
       "      <td>116.006537</td>\n",
       "      <td>76.451934</td>\n",
       "      <td>2.0</td>\n",
       "      <td>7.563630</td>\n",
       "      <td>11.867826</td>\n",
       "      <td>2020-09-07 00:00:00</td>\n",
       "      <td>POLYGON ((816248.445 4132193.271, 816233.868 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4577</td>\n",
       "      <td>669</td>\n",
       "      <td>573.284168</td>\n",
       "      <td>130.043092</td>\n",
       "      <td>49.089490</td>\n",
       "      <td>2.5</td>\n",
       "      <td>7.983824</td>\n",
       "      <td>125.342451</td>\n",
       "      <td>2020-09-07 12:00:00</td>\n",
       "      <td>POLYGON ((816248.445 4132193.271, 816233.868 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7191</td>\n",
       "      <td>2614</td>\n",
       "      <td>792.358530</td>\n",
       "      <td>175.023663</td>\n",
       "      <td>117.275052</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.075437</td>\n",
       "      <td>23.663619</td>\n",
       "      <td>2020-09-08 00:00:00</td>\n",
       "      <td>POLYGON ((816248.445 4132193.271, 816233.868 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7726</td>\n",
       "      <td>534</td>\n",
       "      <td>808.074041</td>\n",
       "      <td>173.230520</td>\n",
       "      <td>39.855291</td>\n",
       "      <td>3.5</td>\n",
       "      <td>9.561005</td>\n",
       "      <td>20.001966</td>\n",
       "      <td>2020-09-08 12:00:00</td>\n",
       "      <td>POLYGON ((816248.445 4132193.271, 816233.868 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8906</td>\n",
       "      <td>1180</td>\n",
       "      <td>878.828559</td>\n",
       "      <td>193.975198</td>\n",
       "      <td>86.964375</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10.133945</td>\n",
       "      <td>11.603288</td>\n",
       "      <td>2020-09-09 00:00:00</td>\n",
       "      <td>POLYGON ((816181.110 4132271.399, 816179.521 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9474</td>\n",
       "      <td>568</td>\n",
       "      <td>900.912519</td>\n",
       "      <td>201.184961</td>\n",
       "      <td>37.124216</td>\n",
       "      <td>4.5</td>\n",
       "      <td>10.516004</td>\n",
       "      <td>20.848169</td>\n",
       "      <td>2020-09-09 12:00:00</td>\n",
       "      <td>POLYGON ((816181.110 4132271.399, 816179.521 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10245</td>\n",
       "      <td>771</td>\n",
       "      <td>932.434329</td>\n",
       "      <td>206.894733</td>\n",
       "      <td>60.837916</td>\n",
       "      <td>5.0</td>\n",
       "      <td>10.987369</td>\n",
       "      <td>7.166316</td>\n",
       "      <td>2020-09-10 00:00:00</td>\n",
       "      <td>POLYGON ((816181.110 4132271.399, 816179.521 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>10556</td>\n",
       "      <td>311</td>\n",
       "      <td>945.705240</td>\n",
       "      <td>204.741362</td>\n",
       "      <td>26.374359</td>\n",
       "      <td>5.5</td>\n",
       "      <td>11.162040</td>\n",
       "      <td>31.396977</td>\n",
       "      <td>2020-09-10 12:00:00</td>\n",
       "      <td>POLYGON ((816181.110 4132271.399, 816179.521 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>11373</td>\n",
       "      <td>817</td>\n",
       "      <td>965.619782</td>\n",
       "      <td>209.235886</td>\n",
       "      <td>57.427888</td>\n",
       "      <td>6.0</td>\n",
       "      <td>11.777928</td>\n",
       "      <td>3.920233</td>\n",
       "      <td>2020-09-11 00:00:00</td>\n",
       "      <td>POLYGON ((816180.244 4132273.134, 816179.521 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>11735</td>\n",
       "      <td>362</td>\n",
       "      <td>982.702742</td>\n",
       "      <td>220.848286</td>\n",
       "      <td>43.141981</td>\n",
       "      <td>6.5</td>\n",
       "      <td>11.941556</td>\n",
       "      <td>32.240580</td>\n",
       "      <td>2020-09-11 12:00:00</td>\n",
       "      <td>POLYGON ((816180.244 4132273.134, 816179.521 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>12314</td>\n",
       "      <td>579</td>\n",
       "      <td>991.762039</td>\n",
       "      <td>219.278744</td>\n",
       "      <td>49.255542</td>\n",
       "      <td>7.0</td>\n",
       "      <td>12.416285</td>\n",
       "      <td>5.511900</td>\n",
       "      <td>2020-09-12 00:00:00</td>\n",
       "      <td>POLYGON ((815934.527 4133486.693, 815932.043 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>12811</td>\n",
       "      <td>497</td>\n",
       "      <td>1003.033613</td>\n",
       "      <td>222.245125</td>\n",
       "      <td>60.378107</td>\n",
       "      <td>7.5</td>\n",
       "      <td>12.772254</td>\n",
       "      <td>33.122254</td>\n",
       "      <td>2020-09-12 12:00:00</td>\n",
       "      <td>POLYGON ((815934.527 4133486.693, 815932.043 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>13715</td>\n",
       "      <td>904</td>\n",
       "      <td>1030.572914</td>\n",
       "      <td>228.469437</td>\n",
       "      <td>72.736393</td>\n",
       "      <td>8.0</td>\n",
       "      <td>13.308132</td>\n",
       "      <td>6.749558</td>\n",
       "      <td>2020-09-13 00:00:00</td>\n",
       "      <td>POLYGON ((815934.527 4133486.693, 815932.043 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>13977</td>\n",
       "      <td>262</td>\n",
       "      <td>1040.176630</td>\n",
       "      <td>230.751623</td>\n",
       "      <td>27.544102</td>\n",
       "      <td>8.5</td>\n",
       "      <td>13.437141</td>\n",
       "      <td>87.147061</td>\n",
       "      <td>2020-09-13 12:00:00</td>\n",
       "      <td>POLYGON ((815934.527 4133486.693, 815932.043 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>15674</td>\n",
       "      <td>1697</td>\n",
       "      <td>1106.186731</td>\n",
       "      <td>232.076230</td>\n",
       "      <td>85.187472</td>\n",
       "      <td>9.0</td>\n",
       "      <td>14.169398</td>\n",
       "      <td>6.867378</td>\n",
       "      <td>2020-09-14 00:00:00</td>\n",
       "      <td>POLYGON ((813555.236 4135170.978, 813551.851 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>16066</td>\n",
       "      <td>392</td>\n",
       "      <td>1116.214545</td>\n",
       "      <td>236.716704</td>\n",
       "      <td>24.650346</td>\n",
       "      <td>9.5</td>\n",
       "      <td>14.393290</td>\n",
       "      <td>48.676582</td>\n",
       "      <td>2020-09-14 12:00:00</td>\n",
       "      <td>POLYGON ((812323.314 4135260.191, 812320.941 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>16886</td>\n",
       "      <td>820</td>\n",
       "      <td>1128.727287</td>\n",
       "      <td>232.904636</td>\n",
       "      <td>47.203083</td>\n",
       "      <td>10.0</td>\n",
       "      <td>14.960212</td>\n",
       "      <td>4.265671</td>\n",
       "      <td>2020-09-15 00:00:00</td>\n",
       "      <td>POLYGON ((812323.314 4135260.191, 812320.941 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>17360</td>\n",
       "      <td>474</td>\n",
       "      <td>1138.109565</td>\n",
       "      <td>232.722576</td>\n",
       "      <td>32.593925</td>\n",
       "      <td>10.5</td>\n",
       "      <td>15.253364</td>\n",
       "      <td>34.874494</td>\n",
       "      <td>2020-09-15 12:00:00</td>\n",
       "      <td>POLYGON ((812323.314 4135260.191, 812320.941 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>18219</td>\n",
       "      <td>859</td>\n",
       "      <td>1152.083511</td>\n",
       "      <td>234.473142</td>\n",
       "      <td>56.206479</td>\n",
       "      <td>11.0</td>\n",
       "      <td>15.813958</td>\n",
       "      <td>5.377381</td>\n",
       "      <td>2020-09-16 00:00:00</td>\n",
       "      <td>POLYGON ((812301.433 4135270.844, 812300.716 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>18827</td>\n",
       "      <td>608</td>\n",
       "      <td>1196.017587</td>\n",
       "      <td>232.068795</td>\n",
       "      <td>54.855875</td>\n",
       "      <td>11.5</td>\n",
       "      <td>15.741407</td>\n",
       "      <td>147.391266</td>\n",
       "      <td>2020-09-16 12:00:00</td>\n",
       "      <td>POLYGON ((812301.433 4135270.844, 812300.716 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>20030</td>\n",
       "      <td>1203</td>\n",
       "      <td>1236.536085</td>\n",
       "      <td>233.670670</td>\n",
       "      <td>71.302677</td>\n",
       "      <td>12.0</td>\n",
       "      <td>16.198476</td>\n",
       "      <td>7.782037</td>\n",
       "      <td>2020-09-17 00:00:00</td>\n",
       "      <td>POLYGON ((812275.083 4135289.177, 812273.739 4...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    n_pixels  n_newpixels        farea      fperim    flinelen  duration  \\\n",
       "0         34           34     5.809600    9.296654    9.296654       0.0   \n",
       "1        381          347    78.174163   50.362071   42.181648       0.5   \n",
       "2       2353         1972   369.414136  103.730050   88.778034       1.0   \n",
       "3       2353            0   369.414136  103.730050    0.000000       1.0   \n",
       "4       3908         1555   516.683128  116.006537   76.451934       2.0   \n",
       "5       4577          669   573.284168  130.043092   49.089490       2.5   \n",
       "6       7191         2614   792.358530  175.023663  117.275052       3.0   \n",
       "7       7726          534   808.074041  173.230520   39.855291       3.5   \n",
       "8       8906         1180   878.828559  193.975198   86.964375       4.0   \n",
       "9       9474          568   900.912519  201.184961   37.124216       4.5   \n",
       "10     10245          771   932.434329  206.894733   60.837916       5.0   \n",
       "11     10556          311   945.705240  204.741362   26.374359       5.5   \n",
       "12     11373          817   965.619782  209.235886   57.427888       6.0   \n",
       "13     11735          362   982.702742  220.848286   43.141981       6.5   \n",
       "14     12314          579   991.762039  219.278744   49.255542       7.0   \n",
       "15     12811          497  1003.033613  222.245125   60.378107       7.5   \n",
       "16     13715          904  1030.572914  228.469437   72.736393       8.0   \n",
       "17     13977          262  1040.176630  230.751623   27.544102       8.5   \n",
       "18     15674         1697  1106.186731  232.076230   85.187472       9.0   \n",
       "19     16066          392  1116.214545  236.716704   24.650346       9.5   \n",
       "20     16886          820  1128.727287  232.904636   47.203083      10.0   \n",
       "21     17360          474  1138.109565  232.722576   32.593925      10.5   \n",
       "22     18219          859  1152.083511  234.473142   56.206479      11.0   \n",
       "23     18827          608  1196.017587  232.068795   54.855875      11.5   \n",
       "24     20030         1203  1236.536085  233.670670   71.302677      12.0   \n",
       "\n",
       "       pixden     meanFRP                   t  \\\n",
       "0    5.852382   49.474118 2020-09-05 00:00:00   \n",
       "1    4.873733  154.283573 2020-09-05 12:00:00   \n",
       "2    6.369545   18.145979 2020-09-06 00:00:00   \n",
       "3    6.369545    0.000000 2020-09-06 12:00:00   \n",
       "4    7.563630   11.867826 2020-09-07 00:00:00   \n",
       "5    7.983824  125.342451 2020-09-07 12:00:00   \n",
       "6    9.075437   23.663619 2020-09-08 00:00:00   \n",
       "7    9.561005   20.001966 2020-09-08 12:00:00   \n",
       "8   10.133945   11.603288 2020-09-09 00:00:00   \n",
       "9   10.516004   20.848169 2020-09-09 12:00:00   \n",
       "10  10.987369    7.166316 2020-09-10 00:00:00   \n",
       "11  11.162040   31.396977 2020-09-10 12:00:00   \n",
       "12  11.777928    3.920233 2020-09-11 00:00:00   \n",
       "13  11.941556   32.240580 2020-09-11 12:00:00   \n",
       "14  12.416285    5.511900 2020-09-12 00:00:00   \n",
       "15  12.772254   33.122254 2020-09-12 12:00:00   \n",
       "16  13.308132    6.749558 2020-09-13 00:00:00   \n",
       "17  13.437141   87.147061 2020-09-13 12:00:00   \n",
       "18  14.169398    6.867378 2020-09-14 00:00:00   \n",
       "19  14.393290   48.676582 2020-09-14 12:00:00   \n",
       "20  14.960212    4.265671 2020-09-15 00:00:00   \n",
       "21  15.253364   34.874494 2020-09-15 12:00:00   \n",
       "22  15.813958    5.377381 2020-09-16 00:00:00   \n",
       "23  15.741407  147.391266 2020-09-16 12:00:00   \n",
       "24  16.198476    7.782037 2020-09-17 00:00:00   \n",
       "\n",
       "                                             geometry  \n",
       "0   POLYGON ((830863.616 4120942.254, 830858.435 4...  \n",
       "1   POLYGON ((830255.348 4120504.272, 829447.716 4...  \n",
       "2   MULTIPOLYGON (((825839.433 4118483.992, 824994...  \n",
       "3   MULTIPOLYGON (((825839.433 4118483.992, 824994...  \n",
       "4   POLYGON ((816248.445 4132193.271, 816233.868 4...  \n",
       "5   POLYGON ((816248.445 4132193.271, 816233.868 4...  \n",
       "6   POLYGON ((816248.445 4132193.271, 816233.868 4...  \n",
       "7   POLYGON ((816248.445 4132193.271, 816233.868 4...  \n",
       "8   POLYGON ((816181.110 4132271.399, 816179.521 4...  \n",
       "9   POLYGON ((816181.110 4132271.399, 816179.521 4...  \n",
       "10  POLYGON ((816181.110 4132271.399, 816179.521 4...  \n",
       "11  POLYGON ((816181.110 4132271.399, 816179.521 4...  \n",
       "12  POLYGON ((816180.244 4132273.134, 816179.521 4...  \n",
       "13  POLYGON ((816180.244 4132273.134, 816179.521 4...  \n",
       "14  POLYGON ((815934.527 4133486.693, 815932.043 4...  \n",
       "15  POLYGON ((815934.527 4133486.693, 815932.043 4...  \n",
       "16  POLYGON ((815934.527 4133486.693, 815932.043 4...  \n",
       "17  POLYGON ((815934.527 4133486.693, 815932.043 4...  \n",
       "18  POLYGON ((813555.236 4135170.978, 813551.851 4...  \n",
       "19  POLYGON ((812323.314 4135260.191, 812320.941 4...  \n",
       "20  POLYGON ((812323.314 4135260.191, 812320.941 4...  \n",
       "21  POLYGON ((812323.314 4135260.191, 812320.941 4...  \n",
       "22  POLYGON ((812301.433 4135270.844, 812300.716 4...  \n",
       "23  POLYGON ((812301.433 4135270.844, 812300.716 4...  \n",
       "24  POLYGON ((812275.083 4135289.177, 812273.739 4...  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdfsf_fperim.plot(edgecolor=pltm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc780b9fdc0>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gdf_fperim.to_crs(epsg=4326).plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "fhull = f.hull"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.86252933059051"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fhull.area/1e6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11341.688938884789"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fhull.length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "from FireConsts import area_VI"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nan nan\n"
     ]
    }
   ],
   "source": [
    "from pyproj import Geod\n",
    "geod = Geod(ellps=\"WGS84\")\n",
    "area_cal = np.abs(geod.geometry_area_perimeter(fhull)[0]/1e6)\n",
    "print(max(area_cal,area_VI),area_cal)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = allfires.fires[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax=plt.subplots(figsize=(15,15))\n",
    "gpd.GeoSeries(f.hull,crs=32610).to_crs(epsg=4326).plot(ax=ax,facecolor='none',edgecolor='r')\n",
    "_=gpd.GeoSeries(f.fline,crs=32610).to_crs(epsg=4326).plot(ax=ax,color='k')\n",
    "_=gpd.GeoSeries(f.newlocsMP,crs=32610).to_crs(epsg=4326).plot(ax=ax,color='r',alpha=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "        # dd1: group of attributes that can change with time (even without expansion or merging)\n",
    "        dd1 = {\n",
    "              'isactive':'int',             # active status\n",
    "              'isdead':'int',               # dead status\n",
    "              't_inactive':'int',           # how long has it been inactive\n",
    "              'isignition':'int',           # is this a new ignition?\n",
    "              'mayreactivate':'int',        # sleeper status\n",
    "              't':'datetime64',\n",
    "              }\n",
    "\n",
    "        # dd2: group of attributes that can only change with fire expansion or merging\n",
    "        dd2 = {\n",
    "              'mergeid':'int',               # this is the id in the large fire database\n",
    "              'ftype':'int',                # fire type\n",
    "              'invalid':'int',              # invalid status\n",
    "              'n_pixels':'int',             # number of total pixels\n",
    "              'n_newpixels':'int',          # number of new pixels\n",
    "              'farea':'float',              # fire size\n",
    "              'fperim':'float',             # fire perimeter length\n",
    "              'flinelen':'float',           # active fire front line length\n",
    "              'duration':'float',           # fire duration\n",
    "              'pixden':'float',             # fire pixel density\n",
    "              'meanFRP':'float',            # mean FRP of the new fire pixels\n",
    "              't_st':'datetime64',\n",
    "              't_ed':'datetime64'\n",
    "              }\n",
    "dd = {**dd1, **dd2} "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdf = gpd.GeoDataFrame(columns=(list(dd.keys())+['fireID']),crs='epsg:4326', geometry=[])\n",
    "gdf = gdf.set_index('fireID')   # set fid column as the index column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>isactive</th>\n",
       "      <th>isdead</th>\n",
       "      <th>t_inactive</th>\n",
       "      <th>isignition</th>\n",
       "      <th>mayreactivate</th>\n",
       "      <th>t</th>\n",
       "      <th>mergeid</th>\n",
       "      <th>ftype</th>\n",
       "      <th>invalid</th>\n",
       "      <th>n_pixels</th>\n",
       "      <th>n_newpixels</th>\n",
       "      <th>farea</th>\n",
       "      <th>fperim</th>\n",
       "      <th>flinelen</th>\n",
       "      <th>duration</th>\n",
       "      <th>pixden</th>\n",
       "      <th>meanFRP</th>\n",
       "      <th>t_st</th>\n",
       "      <th>t_ed</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fireID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty GeoDataFrame\n",
       "Columns: [isactive, isdead, t_inactive, isignition, mayreactivate, t, mergeid, ftype, invalid, n_pixels, n_newpixels, farea, fperim, flinelen, duration, pixden, meanFRP, t_st, t_ed, geometry]\n",
       "Index: []"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "layer= 'perimeter'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "    # - for newly invalidated fire objects, drop the row\n",
    "    if 'invalid' in dd.keys():\n",
    "        for fid in allfires.fids_invalid:  # set newly invalidated object\n",
    "            gdf.loc[fid,'invalid'] = 1\n",
    "        gdf.drop(gdf.index[gdf['invalid'] == 1], inplace = True)  # drop the row\n",
    "\n",
    "    # - for newly dead fires, drop the row\n",
    "    if 'isdead' in dd.keys():\n",
    "        for fid,f in allfires.deadfires.items():  # set dead fire object\n",
    "            gdf.loc[fid,'isdead'] = 1\n",
    "        gdf.drop(gdf.index[gdf['isdead'] == 1], inplace = True)  # drop the row\n",
    "\n",
    "    # 2. modify dd2 for fires with possible modification\n",
    "\n",
    "    # - for mayactive fires (active+sleeper), copy attributes from fire object to gdf\n",
    "    for fid,f in allfires.mayactivefires.items():  # loop over active fires\n",
    "        for k,tp in dd2.items():\n",
    "            if tp == 'datetime64':\n",
    "                gdf.loc[fid,k] = FireTime.t2dt(getattr(f,k))\n",
    "            else:\n",
    "                gdf.loc[fid,k] = getattr(f,k)\n",
    "\n",
    "    # update the hull of each active fire as the geometry column\n",
    "    if layer == 'perimeter':\n",
    "        for fid,f in allfires.mayactivefires.items():\n",
    "            fhull = f.hull\n",
    "            if fhull.geom_type == 'MultiPolygon':\n",
    "                gdf.loc[fid,'geometry'] = gpd.GeoDataFrame(geometry=[fhull]).geometry.values\n",
    "            else:\n",
    "                gdf.loc[fid,'geometry'] = fhull"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "    # 3. modify dd1 for all fires\n",
    "    for fid,f in allfires.fires.items():  # loop over all fires\n",
    "        for k,tp in dd1.items():\n",
    "            if tp == 'datetime64':\n",
    "                gdf.loc[fid,k] = FireTime.t2dt(getattr(f,k))\n",
    "            else:\n",
    "                gdf.loc[fid,k] = getattr(f,k)\n",
    "\n",
    "    # 4. force the correct dtypes\n",
    "    for k,tp in dd.items():\n",
    "        gdf[k] = gdf[k].astype(tp)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdf32610 = gdf.set_crs(epsg=32610,allow_override=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fee1909e400>"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "gdf32610.to_crs(epsg=4326).plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{}"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "{i:f for i,f in allfires.fires.items() if not (f.isactive or f.mayreactivate)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>isactive</th>\n",
       "      <th>isdead</th>\n",
       "      <th>t_inactive</th>\n",
       "      <th>isignition</th>\n",
       "      <th>mayreactivate</th>\n",
       "      <th>t</th>\n",
       "      <th>mergeid</th>\n",
       "      <th>ftype</th>\n",
       "      <th>invalid</th>\n",
       "      <th>n_pixels</th>\n",
       "      <th>n_newpixels</th>\n",
       "      <th>farea</th>\n",
       "      <th>fperim</th>\n",
       "      <th>flinelen</th>\n",
       "      <th>duration</th>\n",
       "      <th>pixden</th>\n",
       "      <th>meanFRP</th>\n",
       "      <th>t_st</th>\n",
       "      <th>t_ed</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fireID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2020-09-17</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>20030</td>\n",
       "      <td>1203</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.782037</td>\n",
       "      <td>2020-09-05 00:00:00</td>\n",
       "      <td>2020-09-17</td>\n",
       "      <td>POLYGON ((812275.08288 4135289.17684, 812273.7...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2020-09-17</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>191</td>\n",
       "      <td>16</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.198750</td>\n",
       "      <td>2020-09-08 12:00:00</td>\n",
       "      <td>2020-09-17</td>\n",
       "      <td>POLYGON ((852395.71841 4116396.22596, 852394.6...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        isactive  isdead  t_inactive  isignition  mayreactivate          t  \\\n",
       "fireID                                                                       \n",
       "0              1       0           0           0              0 2020-09-17   \n",
       "10             1       0           0           0              0 2020-09-17   \n",
       "\n",
       "        mergeid  ftype  invalid  n_pixels  n_newpixels  farea  fperim  \\\n",
       "fireID                                                                  \n",
       "0             0      2        0     20030         1203    NaN     NaN   \n",
       "10           10      2        0       191           16    NaN     NaN   \n",
       "\n",
       "        flinelen  duration  pixden   meanFRP                t_st       t_ed  \\\n",
       "fireID                                                                        \n",
       "0            NaN      12.0     0.0  7.782037 2020-09-05 00:00:00 2020-09-17   \n",
       "10           NaN       8.5     0.0  1.198750 2020-09-08 12:00:00 2020-09-17   \n",
       "\n",
       "                                                 geometry  \n",
       "fireID                                                     \n",
       "0       POLYGON ((812275.08288 4135289.17684, 812273.7...  \n",
       "10      POLYGON ((852395.71841 4116396.22596, 852394.6...  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdf.drop(allfires.fids_invalid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fee188f9bb0>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax=plt.subplots(figsize=(15,15))\n",
    "gpd.GeoSeries(f.hull,crs=32610).to_crs(epsg=2163).plot(ax=ax,facecolor='none',edgecolor='r')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
